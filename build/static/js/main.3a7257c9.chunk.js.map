{"version":3,"sources":["components/Wrapper.js","components/DataArea.js","components/DataBod.js","components/Data.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","DataArea","props","className","alt","last","src","image","title","first","gender","age","phone","email","DataBod","state","alphabetical","ascending","sortedEmployees","employees","sortName","sortEmp","empList","sort","a","b","nameA","name","toLowerCase","nameB","setState","sortAge","dob","this","length","prevProps","onClick","map","item","index","picture","large","cell","Component","Navbar","Search","filteredEmployees","handleInputChange","event","target","value","userTyped","filteredList","filter","indexOf","onChange","type","placeholder","App","axios","get","then","res","data","results","Data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a7257c9.chunk.js","sourcesContent":["import React from \"react\";\nimport './../styles/style.css'\nfunction Wrapper() {\n    return (\n<div>\n    <h1 >\n        Employee Directory\n    </h1>\n    <br></br>\n    <div>\n            All Relevant Information on All Employees, All the Time\n    </div>\n    <br></br>\n</div>\n\n\n    );\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"../styles/style.css\"\nfunction DataArea(props) {\n    return (\n\n        <div className=\"card\">\n            <div className= \"col\">\n            <div className= \"name\"><img alt={props.last} src={props.image}></img></div>\n            <div className= \"name\">{props.title} {props.first} {props.last} </div>\n            <div className= \"name\">{props.gender}</div>\n            <div className= \"name\">{props.age}</div>\n            <div className= \"name\">{props.phone}</div>\n            <div className= \"name\">{props.email}</div>\n            </div>\n        </div>\n    );\n}\n\nexport default DataArea;","import React, { Component } from \"react\";\nimport DataArea from './DataArea';\nimport './../styles/style.css'\n\nclass DataBod extends Component {\n\n    state = {\n        alphabetical: true,\n        ascending: true,\n        sortedEmployees: [],\n        employees: []\n    }\n\n    componentDidMount() {\n        if (this.state.sortedEmployees.length < 1) {\n            this.setState({\n                sortedEmployees: this.props.empList\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.empList !== prevProps.empList) {\n            this.setState({\n                sortedEmployees: this.props.empList\n            })\n        }\n    }\n\n    sortName = () => {\n        let sortEmp = [];\n        if (this.state.alphabetical) {\n            sortEmp = this.props.empList.sort((a, b) => {\n                var nameA = a.name.last.toLowerCase(), nameB = b.name.last.toLowerCase();\n                if (nameA < nameB)\n                    return -1\n                if (nameA > nameB)\n                    return 1\n                return 0\n            })\n        } else {\n            sortEmp = this.props.empList.sort((a, b) => {\n                var nameA = a.name.last.toLowerCase(), nameB = b.name.last.toLowerCase();\n                if (nameA > nameB)\n                    return -1\n                if (nameA < nameB)\n                    return 1\n                return 0\n            })\n        }\n        this.setState({\n            alphabetical: !this.state.alphabetical,\n            sortedEmployees: sortEmp\n\n        })\n    }\n\n    sortAge = () => {\n        let sortEmp = [];\n        if (this.state.ascending) {\n            sortEmp = this.props.empList.sort((a, b) => {\n                var nameA = a.dob.age, nameB = b.dob.age;\n                if (nameA < nameB)\n                    return -1\n                if (nameA > nameB)\n                    return 1\n                return 0\n            })\n        } else {\n            sortEmp = this.props.empList.sort((a, b) => {\n                var nameA = a.dob.age, nameB = b.dob.age;\n                if (nameA > nameB)\n                    return -1\n                if (nameA < nameB)\n                    return 1\n                return 0\n            })\n        }\n        this.setState({\n            ascending: !this.state.ascending,\n            sortedEmployees: sortEmp\n\n        })\n    }\n\n    render() {\n        return (\n\n            <div>\n                <tbody className=\"col\">\n                    <div className= \"name photo\">Photo</div>\n                    <div className= \"name Name\" onClick={this.sortName} \n                    >Name </div>\n                    <div className= \"name gender\">Gender</div>\n                    <div className= \"name\"\n                        onClick={this.sortAge}>Age\n                    </div>\n                    <div className= \"name\">Phone</div>\n                    <div className= \"name mail\">E-mail</div>\n                </tbody>\n\n                {\n                    this.state.sortedEmployees.length > 0 &&\n                    this.state.sortedEmployees.map((item, index) => (\n\n                            <DataArea\n                                image={item.picture.large}\n                                first={item.name.first}\n                                last={item.name.last}\n                                gender={item.gender}\n                                age={item.dob.age}\n                                phone={item.cell}\n                                email={item.email}\n                            />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport default DataBod;","import React, { Component } from \"react\";\nimport './../styles/style.css'\nimport DataBod from './DataBod';\n\nclass Navbar extends Component {\n\n    state = {\n        Search: \"\",\n        filteredEmployees: []\n    };\n\n\n    componentDidMount() {\n        if (this.state.filteredEmployees.length < 1) {\n            this.setState({\n                filteredEmployees: this.props.employees\n            })\n        }\n    }\n\n\n    handleInputChange = event => {\n        this.setState({\n            Search: event.target.value\n        });\n        let userTyped = event.target.value;\n        const filteredList = this.props.employees.filter((item) => {\n            let values = item.name.title + item.name.first + item.name.last + item.gender + item.dob.age + item.email + item.cell;\n            return values.indexOf(userTyped) !== -1;\n\n        });\n\n\n        this.setState({\n            filteredEmployees: filteredList\n\n        });\n    }\n\n\n    render() {\n        return (\n            <div>\n                <form className=\"form\">\n                    <input\n                        value={this.state.Search}\n                        name=\"Search\"\n                        onChange={event => this.handleInputChange(event)}\n                        type=\"text\"\n                        placeholder=\"Search\"\n                    />\n                </form>\n                <br></br>\n                {this.state.filteredEmployees.length > 0 &&\n                    <DataBod empList={this.state.filteredEmployees} />\n                }\n                <br></br>\n            </div>\n\n        );\n    }\n}\n\n\nexport default Navbar;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Wrapper from './components/Wrapper';\nimport Data from './components/Data';\nimport './styles/style.css'\n\n\n\nclass App extends Component {\n\n  state = {\n    employees: [],\n  };\n\n  componentDidMount() {\n      axios.get(`https://randomuser.me/api/?results=20&nat=Aus`)\n        .then(res => {\n          this.setState({ employees: res.data.results });\n        });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Wrapper />\n        {this.state.employees.length > 0 &&\n        <Data employees={this.state.employees}/>\n  }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}